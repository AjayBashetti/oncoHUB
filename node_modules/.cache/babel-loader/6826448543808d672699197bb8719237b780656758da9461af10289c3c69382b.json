{"ast":null,"code":"import React,{useState}from\"react\";import PhoneInput from\"react-phone-input-2\";import\"react-phone-input-2/lib/style.css\";import{auth,RecaptchaVerifier,signInWithPhoneNumber}from\"./firebase\";import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[phoneNumber,setPhoneNumber]=useState(\"\");const[otp,setOtp]=useState(\"\");const[showOtpInput,setShowOtpInput]=useState(false);const[verificationId,setVerificationId]=useState(null);const[message,setMessage]=useState(\"\");const[error,setError]=useState(\"\");const setupRecaptcha=()=>{window.recaptchaVerifier=new RecaptchaVerifier(\"recaptcha-container\",// Make sure to match your div ID\n{size:\"invisible\",// You can also use 'normal' for a visible recaptcha\ncallback:response=>{console.log(\"Recaptcha solved\");},'expired-callback':()=>{console.error(\"Recaptcha expired. Please try again.\");}},auth);window.recaptchaVerifier.render().then(function(widgetId){window.recaptchaWidgetId=widgetId;});};const requestOtp=async()=>{setMessage(\"\");setError(\"\");if(phoneNumber.length>=10){setupRecaptcha();// Set up Recaptcha\nconst appVerifier=window.recaptchaVerifier;try{const confirmationResult=await signInWithPhoneNumber(auth,\"+\"+phoneNumber,appVerifier);setVerificationId(confirmationResult.verificationId);setShowOtpInput(true);setMessage(\"OTP sent successfully. Please check your phone.\");}catch(err){setError(\"Failed to send OTP. Try again later.\");}}else{setError(\"Please enter a valid phone number.\");}};const verifyOtp=async()=>{setMessage(\"\");setError(\"\");if(otp.length===6&&verificationId){try{const confirmationResult=await window.confirmationResult.confirm(otp);const user=confirmationResult.user;setMessage(`Login successful! Welcome, ${user.phoneNumber}.`);}catch(err){setError(\"Invalid OTP. Please try again.\");}}else{setError(\"Please enter a valid 6-digit OTP.\");}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"OTP Login\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(PhoneInput,{country:\"in\"// Set your default country code\n,value:phoneNumber,onChange:setPhoneNumber}),/*#__PURE__*/_jsx(\"div\",{id:\"recaptcha-container\"}),!showOtpInput&&/*#__PURE__*/_jsx(\"button\",{id:\"sign-in-button\",onClick:requestOtp,children:\"Send OTP\"}),showOtpInput&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter OTP\",value:otp,onChange:e=>setOtp(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:verifyOtp,children:\"Verify OTP\"})]})]}),/*#__PURE__*/_jsx(\"p\",{style:{color:\"green\"},children:message}),/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\"},children:error})]});};export default App;","map":{"version":3,"names":["React","useState","PhoneInput","auth","RecaptchaVerifier","signInWithPhoneNumber","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","App","phoneNumber","setPhoneNumber","otp","setOtp","showOtpInput","setShowOtpInput","verificationId","setVerificationId","message","setMessage","error","setError","setupRecaptcha","window","recaptchaVerifier","size","callback","response","console","log","expired-callback","render","then","widgetId","recaptchaWidgetId","requestOtp","length","appVerifier","confirmationResult","err","verifyOtp","confirm","user","className","children","country","value","onChange","id","onClick","type","placeholder","e","target","style","color"],"sources":["/workspaces/oncoHUB/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { auth, RecaptchaVerifier, signInWithPhoneNumber } from \"./firebase\";\n\nconst App = () => {\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [otp, setOtp] = useState(\"\");\n  const [showOtpInput, setShowOtpInput] = useState(false);\n  const [verificationId, setVerificationId] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const setupRecaptcha = () => {\n    window.recaptchaVerifier = new RecaptchaVerifier(\n      \"recaptcha-container\", // Make sure to match your div ID\n      {\n        size: \"invisible\", // You can also use 'normal' for a visible recaptcha\n        callback: (response) => {\n          console.log(\"Recaptcha solved\");\n        },\n        'expired-callback': () => {\n          console.error(\"Recaptcha expired. Please try again.\");\n        },\n      },\n      auth\n    );\n\n    window.recaptchaVerifier.render().then(function (widgetId) {\n      window.recaptchaWidgetId = widgetId;\n    });\n  };\n\n  const requestOtp = async () => {\n    setMessage(\"\");\n    setError(\"\");\n    if (phoneNumber.length >= 10) {\n      setupRecaptcha(); // Set up Recaptcha\n      const appVerifier = window.recaptchaVerifier;\n      try {\n        const confirmationResult = await signInWithPhoneNumber(\n          auth,\n          \"+\" + phoneNumber,\n          appVerifier\n        );\n        setVerificationId(confirmationResult.verificationId);\n        setShowOtpInput(true);\n        setMessage(\"OTP sent successfully. Please check your phone.\");\n      } catch (err) {\n        setError(\"Failed to send OTP. Try again later.\");\n      }\n    } else {\n      setError(\"Please enter a valid phone number.\");\n    }\n  };\n\n  const verifyOtp = async () => {\n    setMessage(\"\");\n    setError(\"\");\n    if (otp.length === 6 && verificationId) {\n      try {\n        const confirmationResult = await window.confirmationResult.confirm(otp);\n        const user = confirmationResult.user;\n        setMessage(`Login successful! Welcome, ${user.phoneNumber}.`);\n      } catch (err) {\n        setError(\"Invalid OTP. Please try again.\");\n      }\n    } else {\n      setError(\"Please enter a valid 6-digit OTP.\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>OTP Login</h1>\n      <div>\n        <PhoneInput\n          country={\"in\"} // Set your default country code\n          value={phoneNumber}\n          onChange={setPhoneNumber}\n        />\n        <div id=\"recaptcha-container\"></div>\n        {!showOtpInput && (\n          <button id=\"sign-in-button\" onClick={requestOtp}>\n            Send OTP\n          </button>\n        )}\n        {showOtpInput && (\n          <>\n            <input\n              type=\"text\"\n              placeholder=\"Enter OTP\"\n              value={otp}\n              onChange={(e) => setOtp(e.target.value)}\n            />\n            <button onClick={verifyOtp}>Verify OTP</button>\n          </>\n        )}\n      </div>\n      <p style={{ color: \"green\" }}>{message}</p>\n      <p style={{ color: \"red\" }}>{error}</p>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}